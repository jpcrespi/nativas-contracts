/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface NativasOffsetContract
  extends Truffle.Contract<NativasOffsetInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<NativasOffsetInstance>;
}

export interface ControlTransferred {
  name: "ControlTransferred";
  args: {
    oldController: string;
    newControllerr: string;
    0: string;
    1: string;
  };
}

export interface PerformOffset {
  name: "PerformOffset";
  args: {
    account: string;
    tokenId: BN;
    amount: BN;
    reason: string;
    0: string;
    1: BN;
    2: BN;
    3: string;
  };
}

type AllEvents = ControlTransferred | PerformOffset;

export interface NativasOffsetInstance extends Truffle.ContractInstance {
  /**
   * Returns the address of the current controller.
   */
  controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * See {Controllable-_transferControl}.
   */
  transferControl: {
    (controller_: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      controller_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      controller_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      controller_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.
   */
  balanceOf(
    account: string,
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` caller must have the same length.
   */
  balanceOfBatch(
    accounts: string[],
    tokenIds: (number | BN | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  /**
   * Get the amount of offsets by account
   */
  getOffsetCount(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get offset data from and account and an index.
   */
  getOffsetValue(
    account: string,
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string }>;

  /**
   * See {IERC1155Logger-offset} Requirements: - the caller must be the controller.
   */
  offset: {
    (
      account: string,
      tokenId: number | BN | string,
      amount: number | BN | string,
      reason: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      tokenId: number | BN | string,
      amount: number | BN | string,
      reason: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      tokenId: number | BN | string,
      amount: number | BN | string,
      reason: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      tokenId: number | BN | string,
      amount: number | BN | string,
      reason: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Returns the address of the current controller.
     */
    controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * See {Controllable-_transferControl}.
     */
    transferControl: {
      (controller_: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        controller_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        controller_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        controller_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.
     */
    balanceOf(
      account: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` caller must have the same length.
     */
    balanceOfBatch(
      accounts: string[],
      tokenIds: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Get the amount of offsets by account
     */
    getOffsetCount(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get offset data from and account and an index.
     */
    getOffsetValue(
      account: string,
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string }>;

    /**
     * See {IERC1155Logger-offset} Requirements: - the caller must be the controller.
     */
    offset: {
      (
        account: string,
        tokenId: number | BN | string,
        amount: number | BN | string,
        reason: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        tokenId: number | BN | string,
        amount: number | BN | string,
        reason: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        tokenId: number | BN | string,
        amount: number | BN | string,
        reason: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        tokenId: number | BN | string,
        amount: number | BN | string,
        reason: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
