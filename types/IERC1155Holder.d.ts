/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IERC1155HolderContract
  extends Truffle.Contract<IERC1155HolderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC1155HolderInstance>;
}

type AllEvents = never;

export interface IERC1155HolderInstance extends Truffle.ContractInstance {
  /**
   * Initialize contract
   */
  init: {
    (
      entity_: string,
      operator_: string,
      controller_: string,
      holderId_: number | BN | string,
      nin_: string,
      name_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      entity_: string,
      operator_: string,
      controller_: string,
      holderId_: number | BN | string,
      nin_: string,
      name_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      entity_: string,
      operator_: string,
      controller_: string,
      holderId_: number | BN | string,
      nin_: string,
      name_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      entity_: string,
      operator_: string,
      controller_: string,
      holderId_: number | BN | string,
      nin_: string,
      name_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Initialize contract
     */
    init: {
      (
        entity_: string,
        operator_: string,
        controller_: string,
        holderId_: number | BN | string,
        nin_: string,
        name_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        entity_: string,
        operator_: string,
        controller_: string,
        holderId_: number | BN | string,
        nin_: string,
        name_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        entity_: string,
        operator_: string,
        controller_: string,
        holderId_: number | BN | string,
        nin_: string,
        name_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        entity_: string,
        operator_: string,
        controller_: string,
        holderId_: number | BN | string,
        nin_: string,
        name_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
