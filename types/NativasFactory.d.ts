/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface NativasFactoryContract
  extends Truffle.Contract<NativasFactoryInstance> {
  "new"(
    controller_: string,
    template_: string,
    meta?: Truffle.TransactionDetails
  ): Promise<NativasFactoryInstance>;
}

export interface ControlTransferred {
  name: "ControlTransferred";
  args: {
    oldController: string;
    newControllerr: string;
    0: string;
    1: string;
  };
}

export interface HolderCreated {
  name: "HolderCreated";
  args: {
    holderId: BN;
    holderAddress: string;
    0: BN;
    1: string;
  };
}

type AllEvents = ControlTransferred | HolderCreated;

export interface NativasFactoryInstance extends Truffle.ContractInstance {
  /**
   * Returns the address of the current controller.
   */
  controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * get holder contract template
   */
  template(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * get holder contract by holderId.
   */
  getHolder(
    holderId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * See {Controllable-_safeTransferControl}. Requirements: - the caller must be admin. - new controller must implement IAccessControl interface
   */
  transferControl: {
    (controller_: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      controller_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      controller_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      controller_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {NativasFactory-_setHolder} Requirements: - the caller must be editor.
   */
  setHolder: {
    (
      entity_: string,
      holderId_: number | BN | string,
      nin_: string,
      name_: string,
      controller_: string,
      operator_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      entity_: string,
      holderId_: number | BN | string,
      nin_: string,
      name_: string,
      controller_: string,
      operator_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      entity_: string,
      holderId_: number | BN | string,
      nin_: string,
      name_: string,
      controller_: string,
      operator_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      entity_: string,
      holderId_: number | BN | string,
      nin_: string,
      name_: string,
      controller_: string,
      operator_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {NativasFactory-_updateTemplate} Requirements: - the caller must be editor.
   */
  setTemplate: {
    (template_: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      template_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      template_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      template_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Returns the address of the current controller.
     */
    controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * get holder contract template
     */
    template(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * get holder contract by holderId.
     */
    getHolder(
      holderId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * See {Controllable-_safeTransferControl}. Requirements: - the caller must be admin. - new controller must implement IAccessControl interface
     */
    transferControl: {
      (controller_: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        controller_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        controller_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        controller_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {NativasFactory-_setHolder} Requirements: - the caller must be editor.
     */
    setHolder: {
      (
        entity_: string,
        holderId_: number | BN | string,
        nin_: string,
        name_: string,
        controller_: string,
        operator_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        entity_: string,
        holderId_: number | BN | string,
        nin_: string,
        name_: string,
        controller_: string,
        operator_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        entity_: string,
        holderId_: number | BN | string,
        nin_: string,
        name_: string,
        controller_: string,
        operator_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        entity_: string,
        holderId_: number | BN | string,
        nin_: string,
        name_: string,
        controller_: string,
        operator_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {NativasFactory-_updateTemplate} Requirements: - the caller must be editor.
     */
    setTemplate: {
      (template_: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        template_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        template_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        template_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
